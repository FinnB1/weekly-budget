{"version":3,"sources":["logo.svg","Options.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Options","props","state","supermarket","frequency","location","strength","button","Button","onClick","verifyInput","className","disabled","console","log","this","setState","buttonActive","key","val","updateButton","Card","bg","ListGroup","Item","Form","Group","as","Row","Control","defaultValue","onChange","setValue","value","React","Component","App","Container","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sLAAAA,EAAOC,QAAU,IAA0B,kC,mLCStBC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAa,GACbC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,QAAS,EAAKC,YAAaC,UAAU,wBAAwBC,UAAQ,GAA7E,wBAPG,E,2DAcfC,QAAQC,IAAIC,KAAKb,MAAMC,aACQ,KAA3BY,KAAKb,MAAMC,aAA+C,KAAzBY,KAAKb,MAAME,WAA4C,KAAxBW,KAAKb,MAAMG,UAA2C,KAAxBU,KAAKb,MAAMI,UACzGS,KAAKC,SAAS,CACVC,aAAc,kBAACT,EAAA,EAAD,CAAQC,QAASM,KAAKL,YAAaC,UAAU,yBAA7C,2B,+BAOjBO,EAAKC,GACVN,QAAQC,IAAI,oBAAoBI,EAAI,OAAOC,GAC3CJ,KAAKC,SAAL,eACKE,EAAMC,IAEXJ,KAAKK,iB,+BAIC,IAAD,OACL,OACI,6BACA,kBAACC,EAAA,EAAD,CAAMC,GAAG,eACL,kBAACC,EAAA,EAAD,CAAWZ,UAAU,aACjB,kBAACY,EAAA,EAAUC,KAAX,KACI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKjB,UAAU,YAA/B,iBAEI,kBAACc,EAAA,EAAKI,QAAN,CAAcF,GAAG,SAAShB,UAAU,iBAAiBmB,aAAa,MAAMC,SAAU,kBAAM,EAAKC,SAAS,cAAe,EAAKC,SACtH,uCACA,4BAAQA,MAAM,KAAd,gBACA,4BAAQA,MAAM,KAAd,uBACA,4BAAQA,MAAM,KAAd,sBAIZ,kBAACV,EAAA,EAAUC,KAAX,KACI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKjB,UAAU,YAA/B,gBAEI,kBAACc,EAAA,EAAKI,QAAN,CAAcF,GAAG,SAAShB,UAAU,iBAAiBmB,aAAa,OAC9D,uCACA,wCACA,yCACA,wDANR,YAWJ,kBAACP,EAAA,EAAUC,KAAX,KACI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKjB,UAAU,YAA/B,oBAEI,kBAACc,EAAA,EAAKI,QAAN,CAAcF,GAAG,SAAShB,UAAU,iBAAiBmB,aAAa,OAC9D,uCACA,6CACA,gDAIZ,kBAACP,EAAA,EAAUC,KAAX,KACI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKjB,UAAU,YAA/B,MAEI,kBAACc,EAAA,EAAKI,QAAN,CAAcF,GAAG,SAAShB,UAAU,iBAAiBmB,aAAa,OAC9D,uCACA,iDACA,2CACA,oDAIZ,kBAACP,EAAA,EAAUC,KAAX,6BAGHT,KAAKb,MAAMK,Y,GAtFS2B,IAAMC,W,QCM5BC,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAW1B,UAAU,OACjB,kBAAC,EAAD,QCEY2B,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.d80d9b15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './App.css';\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n\r\nexport default class Options extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            supermarket: \"\",\r\n            frequency: \"\",\r\n            location: \"\",\r\n            strength: \"\",\r\n            button: <Button onClick={this.verifyInput} className=\"p-2 my-3 w-50 mx-auto\" disabled>\r\n                Calculate my budget\r\n            </Button>,\r\n        }\r\n    }\r\n\r\n    updateButton() {\r\n        console.log(this.state.supermarket);\r\n        if (this.state.supermarket !== \"\" && this.state.frequency !== \"\" && this.state.location !== \"\" && this.state.strength !== \"\"){\r\n            this.setState({\r\n                buttonActive: <Button onClick={this.verifyInput} className=\"p-2 my-3 w-50 mx-auto\">\r\n                    Calculate my budget\r\n                </Button>,\r\n            })\r\n        }\r\n    }\r\n\r\n    setValue(key, val) {\r\n        console.log(\"Setting state of \"+key+\" to \"+val);\r\n        this.setState({\r\n            [key]: val,\r\n        })\r\n        this.updateButton()\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Card bg=\"transparent\">\r\n                <ListGroup className=\"main-list\">\r\n                    <ListGroup.Item>\r\n                        <Form.Group as={Row} className=\"form-row\">\r\n                                I will shop at\r\n                            <Form.Control as=\"select\" className=\"w-25 mx-3 mt-2\" defaultValue=\"...\" onChange={() => this.setValue(\"supermarket\", this.value)}>\r\n                                <option>...</option>\r\n                                <option value=\"1\">Lidl or Aldi</option>\r\n                                <option value=\"2\">Tesco or Sainsburys</option>\r\n                                <option value=\"3\">Waitrose or M&S</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Form.Group as={Row} className=\"form-row\">\r\n                            I will go out\r\n                            <Form.Control as=\"select\" className=\"w-25 mx-3 mt-2\" defaultValue=\"...\">\r\n                                <option>...</option>\r\n                                <option>once</option>\r\n                                <option>twice</option>\r\n                                <option>three times or more</option>\r\n                            </Form.Control>\r\n                            a week.\r\n                        </Form.Group>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Form.Group as={Row} className=\"form-row\">\r\n                            I'll be living in\r\n                            <Form.Control as=\"select\" className=\"w-25 mx-3 mt-2\" defaultValue=\"...\">\r\n                                <option>...</option>\r\n                                <option>in London</option>\r\n                                <option>Elsewhere</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Form.Group as={Row} className=\"form-row\">\r\n                            I'm\r\n                            <Form.Control as=\"select\" className=\"w-25 mx-3 mt-2\" defaultValue=\"...\">\r\n                                <option>...</option>\r\n                                <option>a lightweight</option>\r\n                                <option>average</option>\r\n                                <option>a heavyweight</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n                {this.state.button}\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Options from \"./Options\";\nimport Container from \"react-bootstrap/Container\";\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n        <Options />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}